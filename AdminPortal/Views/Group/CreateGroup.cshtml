@{
    ViewBag.Title = "Create Group";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section style {
    <style>
        ul.tree {
            margin: 0;
            padding: 0;
            list-style: none;
        }

            ul.tree li {
                list-style: none;
            }

        input#name {
            width: 236%;
        }

        div#users {
            width: 35%;
            float: right;
            margin-top: -7%;
        }

        .card-action {
            padding: 2%;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <form id="form" class="form-inline">
                    <div class="card-body">
                        <div class="form-group form-show-validation col-md-6">
                            <label for="name" class="col-lg-3 col-md-3 col-sm-4 mt-sm-2">Group Name <span class="required-label">*</span></label>
                            <div class="col-lg-4 col-md-9 col-sm-8">
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            <span id="message" style="display: none;color: red !important;font-size: 10px;">Group Name Already Exist Please Try Another</span>
                        </div>
                        <div class="form-group form-show-validation row">
                            <label for="name" class="col-lg-3 col-md-3 col-sm-4 mt-sm-2">Permissions <span class="required-label">*</span></label>
                            <div class=" col-lg-4 col-md-9 col-sm-8" id="Permission">

                            </div>
                        </div>
                    </div>
                </form>
                <div class="card-action">
                    <div class="row">
                        <div class="col-md-12">
                            <input class="btn bg-gradient-dark" type="submit" value="Submit" id="btnSubmit">
                            <button class="btn bg-gradient-danger" id="cancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
    {
    @Scripts.Render("~/bundles/stepform/js")
    <script src="~/Scripts/ProjectScript/CrudScript.js"></script>
    <script src="~/Scripts/ProjectScript/GroupScript.js"></script>
    <script src="~/Scripts/ProjectScript/CommonMethods.js"></script>

    <script>
        $('#btnSubmit').click(function () {
            var form = $("#form");
            
            if (form.valid()) {
                GroupScript.SaveGroup();
            }
            else {
                ShowDivError("Please fill out the form");
            }
        })
        $('input[type=checkbox]').click(function () {
            debugger
            // children checkboxes depend on current checkbox
            $(this).next().find('input[type=checkbox]').prop('checked', this.checked);
            // go up the hierarchy - and check/uncheck depending on number of children checked/unchecked
            $(this).parents('ul').prev('input[type=checkbox]').prop('checked', function () {
                return $(this).next().find(':checked').length;
            });
        });
        $(document).on('click', '.tree label', function (e) {
            debugger
            $(this).next('ul').fadeToggle();
            e.stopPropagation();
        });

        $(document).on("focusout", "#name", function () {
            debugger
            var name = $(this).val();
            if (name != null && name != '') {
                GroupScript.CheckGroup(name);
            }
        });

        $(document).on('change', '.tree input[type=checkbox]', function (e) {
            debugger
            $(this).next().find('input[type=checkbox]').prop('checked', this.checked);
            $(this).next().find('input[type=checkbox]').prop('value', this.checked ? 1 : 0);
            // go up the hierarchy - and check/uncheck depending on number of children checked/unchecked
            $(this).parents('ul').prev('input[type=checkbox]').prop('checked', function () {
                debugger
                $(this).next().find(':checked').prop('value', this.checked ? 1 : 0);
                return $(this).next().find(':checked').length;
            });

            $(this).siblings('ul').find("input[type='checkbox']").prop('value', this.checked ? 1 : 0);

            this.value = this.checked ? 1 : 0;
            e.stopPropagation();
        });

        $(document).ready(function () {
            GroupScript.GetAllForms();
        });


        $('#cancel').click(function () {
            debugger
            window.location = "/Group/Index";
        });

        $(document).on('click', 'button', function (e) {
            debugger
            switch ($(this).text()) {
                case 'Collepsed':
                    $('.tree ul').fadeOut();
                    break;
                case 'Expanded':
                    $('.tree ul').fadeIn();
                    break;
                case 'Checked All':
                    $(".tree input[type='checkbox']").prop('checked', true);
                    break;
                case 'Unchek All':
                    $(".tree input[type='checkbox']").prop('checked', false);
                    break;
                default:
            }
        });
    </script>
}
